/**
 * FinchAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("GoalApi", () => {
  let instance: api.GoalApi
  beforeEach(function() {
    instance = new api.GoalApi(config)
  });

  test("deleteGoal", () => {
    const id: string = "id_example"
    return expect(instance.deleteGoal(id, {})).resolves.toBe(null)
  })
  test("getGoal", () => {
    const id: string = "id_example"
    return expect(instance.getGoal(id, {})).resolves.toBe(null)
  })
  test("getGoals", () => {
    return expect(instance.getGoals({})).resolves.toBe(null)
  })
  test("newGoal", () => {
    const body: api.GoalNewPayload = undefined
    return expect(instance.newGoal(body, {})).resolves.toBe(null)
  })
  test("updateGoal", () => {
    const id: string = "id_example"
    return expect(instance.updateGoal(id, {})).resolves.toBe(null)
  })
})

describe("InsightsApi", () => {
  let instance: api.InsightsApi
  beforeEach(function() {
    instance = new api.InsightsApi(config)
  });

  test("dismissInsight", () => {
    const id: string = "id_example"
    return expect(instance.dismissInsight(id, {})).resolves.toBe(null)
  })
  test("getInsights", () => {
    return expect(instance.getInsights({})).resolves.toBe(null)
  })
})

describe("LeaderboardApi", () => {
  let instance: api.LeaderboardApi
  beforeEach(function() {
    instance = new api.LeaderboardApi(config)
  });

  test("getLeaderboard", () => {
    const type: string = "type_example"
    return expect(instance.getLeaderboard(type, {})).resolves.toBe(null)
  })
})

describe("PlaidApi", () => {
  let instance: api.PlaidApi
  beforeEach(function() {
    instance = new api.PlaidApi(config)
  });

  test("plaidLink", () => {
    return expect(instance.plaidLink({})).resolves.toBe(null)
  })
  test("plaidLinkAccess", () => {
    const body: api.PublicTokenExchangeRequest = undefined
    return expect(instance.plaidLinkAccess(body, {})).resolves.toBe(null)
  })
  test("plaidWebhook", () => {
    const plaidVerification: api.PlaidJWT = undefined
    return expect(instance.plaidWebhook(plaidVerification, {})).resolves.toBe(null)
  })
})

describe("PlanApi", () => {
  let instance: api.PlanApi
  beforeEach(function() {
    instance = new api.PlanApi(config)
  });

  test("deletePlan", () => {
    const id: string = "id_example"
    return expect(instance.deletePlan(id, {})).resolves.toBe(null)
  })
  test("getPlan", () => {
    const id: string = "id_example"
    return expect(instance.getPlan(id, {})).resolves.toBe(null)
  })
  test("getPlans", () => {
    return expect(instance.getPlans({})).resolves.toBe(null)
  })
  test("newPlan", () => {
    const body: api.PlanNewPayload = undefined
    return expect(instance.newPlan(body, {})).resolves.toBe(null)
  })
  test("updatePlan", () => {
    const id: string = "id_example"
    return expect(instance.updatePlan(id, {})).resolves.toBe(null)
  })
})

describe("RecurringApi", () => {
  let instance: api.RecurringApi
  beforeEach(function() {
    instance = new api.RecurringApi(config)
  });

  test("deleteRecurring", () => {
    const id: string = "id_example"
    return expect(instance.deleteRecurring(id, {})).resolves.toBe(null)
  })
  test("getRecurring", () => {
    const id: string = "id_example"
    return expect(instance.getRecurring(id, {})).resolves.toBe(null)
  })
  test("getRecurringExamples", () => {
    return expect(instance.getRecurringExamples({})).resolves.toBe(null)
  })
  test("getRecurrings", () => {
    return expect(instance.getRecurrings({})).resolves.toBe(null)
  })
  test("newRecurring", () => {
    const body: api.RecurringNewPayload = undefined
    return expect(instance.newRecurring(body, {})).resolves.toBe(null)
  })
  test("updateRecurring", () => {
    const body: api.RecurringNewPayload = undefined
    const id: string = "id_example"
    return expect(instance.updateRecurring(body, id, {})).resolves.toBe(null)
  })
})

describe("SnapshotsApi", () => {
  let instance: api.SnapshotsApi
  beforeEach(function() {
    instance = new api.SnapshotsApi(config)
  });

  test("getSnapshots", () => {
    return expect(instance.getSnapshots({})).resolves.toBe(null)
  })
})

describe("TimeseriesApi", () => {
  let instance: api.TimeseriesApi
  beforeEach(function() {
    instance = new api.TimeseriesApi(config)
  });

  test("getTimeseries", () => {
    return expect(instance.getTimeseries({})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("loginUser", () => {
    const body: api.LoginPayload = {
    "email" : "ligma2@gmail.com",
    "password" : "testtest"
  }
    return expect(instance.loginUser(body, {})).resolves.toBe(null)
  })
  test("signupUser", () => {
    const body: api.SignupPayload = undefined
    return expect(instance.signupUser(body, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("registerIOSDevice", () => {
    return expect(instance.registerIOSDevice({})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.UpdateUserRequest = undefined
    return expect(instance.updateUser(body, {})).resolves.toBe(null)
  })
})

describe("ValidationApi", () => {
  let instance: api.ValidationApi
  beforeEach(function() {
    instance = new api.ValidationApi(config)
  });

  test("validateUser", () => {
    const body: api.ValidateUserPayload = undefined
    return expect(instance.validateUser(body, {})).resolves.toBe(null)
  })
})

