/* tslint:disable */
/* eslint-disable */
/**
 * FinchAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    Plan,
    PlanFromJSON,
    PlanToJSON,
    PlanNewPayload,
    PlanNewPayloadFromJSON,
    PlanNewPayloadToJSON,
    PlanResponse,
    PlanResponseFromJSON,
    PlanResponseToJSON,
} from '../models';

export interface GetPlaidPlanWithDaysRequest {
    days: number;
}

export interface GetPlanWithDaysRequest {
    days: number;
}

export interface NewPlanRequest {
    planNewPayload: PlanNewPayload;
}

export interface NewPlanWithDaysRequest {
    days: number;
    planNewPayload: PlanNewPayload;
}

export interface UpdatePlanWithDaysRequest {
    days: number;
}

/**
 * 
 */
export class PlanApi extends runtime.BaseAPI {

    /**
     * Delete user\'s plan
     */
    async deletePlanRaw(): Promise<runtime.ApiResponse<Plan>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plan`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanFromJSON(jsonValue));
    }

    /**
     * Delete user\'s plan
     */
    async deletePlan(): Promise<Plan> {
        const response = await this.deletePlanRaw();
        return await response.value();
    }

    /**
     * Get plaid plan and generate timeseries for 365 days
     */
    async getPlaidPlanRaw(): Promise<runtime.ApiResponse<PlanResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plan/plaid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Get plaid plan and generate timeseries for 365 days
     */
    async getPlaidPlan(): Promise<PlanResponse> {
        const response = await this.getPlaidPlanRaw();
        return await response.value();
    }

    /**
     * Get plaid plan and generate timeseries for specified number of days
     */
    async getPlaidPlanWithDaysRaw(requestParameters: GetPlaidPlanWithDaysRequest): Promise<runtime.ApiResponse<PlanResponse>> {
        if (requestParameters.days === null || requestParameters.days === undefined) {
            throw new runtime.RequiredError('days','Required parameter requestParameters.days was null or undefined when calling getPlaidPlanWithDays.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plan/plaid/{days}`.replace(`{${"days"}}`, encodeURIComponent(String(requestParameters.days))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Get plaid plan and generate timeseries for specified number of days
     */
    async getPlaidPlanWithDays(requestParameters: GetPlaidPlanWithDaysRequest): Promise<PlanResponse> {
        const response = await this.getPlaidPlanWithDaysRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get plan and generate timeseries for 365 days
     */
    async getPlanRaw(): Promise<runtime.ApiResponse<PlanResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plan`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Get plan and generate timeseries for 365 days
     */
    async getPlan(): Promise<PlanResponse> {
        const response = await this.getPlanRaw();
        return await response.value();
    }

    /**
     * Get plan and generate timeseries for specified number of days
     */
    async getPlanWithDaysRaw(requestParameters: GetPlanWithDaysRequest): Promise<runtime.ApiResponse<PlanResponse>> {
        if (requestParameters.days === null || requestParameters.days === undefined) {
            throw new runtime.RequiredError('days','Required parameter requestParameters.days was null or undefined when calling getPlanWithDays.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plan/{days}`.replace(`{${"days"}}`, encodeURIComponent(String(requestParameters.days))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Get plan and generate timeseries for specified number of days
     */
    async getPlanWithDays(requestParameters: GetPlanWithDaysRequest): Promise<PlanResponse> {
        const response = await this.getPlanWithDaysRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new plan for the user and generate timeseries for 365 days
     */
    async newPlanRaw(requestParameters: NewPlanRequest): Promise<runtime.ApiResponse<PlanResponse>> {
        if (requestParameters.planNewPayload === null || requestParameters.planNewPayload === undefined) {
            throw new runtime.RequiredError('planNewPayload','Required parameter requestParameters.planNewPayload was null or undefined when calling newPlan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlanNewPayloadToJSON(requestParameters.planNewPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new plan for the user and generate timeseries for 365 days
     */
    async newPlan(requestParameters: NewPlanRequest): Promise<PlanResponse> {
        const response = await this.newPlanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new plan for the user and generate timeseries for specified number of days
     */
    async newPlanWithDaysRaw(requestParameters: NewPlanWithDaysRequest): Promise<runtime.ApiResponse<PlanResponse>> {
        if (requestParameters.days === null || requestParameters.days === undefined) {
            throw new runtime.RequiredError('days','Required parameter requestParameters.days was null or undefined when calling newPlanWithDays.');
        }

        if (requestParameters.planNewPayload === null || requestParameters.planNewPayload === undefined) {
            throw new runtime.RequiredError('planNewPayload','Required parameter requestParameters.planNewPayload was null or undefined when calling newPlanWithDays.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/plan/{days}`.replace(`{${"days"}}`, encodeURIComponent(String(requestParameters.days))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlanNewPayloadToJSON(requestParameters.planNewPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new plan for the user and generate timeseries for specified number of days
     */
    async newPlanWithDays(requestParameters: NewPlanWithDaysRequest): Promise<PlanResponse> {
        const response = await this.newPlanWithDaysRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update plan and generate timeseries for 365 days
     */
    async updatePlanRaw(): Promise<runtime.ApiResponse<PlanResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plan`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Update plan and generate timeseries for 365 days
     */
    async updatePlan(): Promise<PlanResponse> {
        const response = await this.updatePlanRaw();
        return await response.value();
    }

    /**
     * Update plan and generate timeseries for specified number of days
     */
    async updatePlanWithDaysRaw(requestParameters: UpdatePlanWithDaysRequest): Promise<runtime.ApiResponse<PlanResponse>> {
        if (requestParameters.days === null || requestParameters.days === undefined) {
            throw new runtime.RequiredError('days','Required parameter requestParameters.days was null or undefined when calling updatePlanWithDays.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plan/{days}`.replace(`{${"days"}}`, encodeURIComponent(String(requestParameters.days))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanResponseFromJSON(jsonValue));
    }

    /**
     * Update plan and generate timeseries for specified number of days
     */
    async updatePlanWithDays(requestParameters: UpdatePlanWithDaysRequest): Promise<PlanResponse> {
        const response = await this.updatePlanWithDaysRaw(requestParameters);
        return await response.value();
    }

}
