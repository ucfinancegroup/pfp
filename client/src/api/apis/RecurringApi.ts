/* tslint:disable */
/* eslint-disable */
/**
 * FinchAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    Recurring,
    RecurringFromJSON,
    RecurringToJSON,
    RecurringNewPayload,
    RecurringNewPayloadFromJSON,
    RecurringNewPayloadToJSON,
} from '../models';

export interface DeleteRecurringRequest {
    id: string;
}

export interface GetRecurringRequest {
    id: string;
}

export interface NewRecurringRequest {
    recurringNewPayload: RecurringNewPayload;
}

export interface UpdateRecurringRequest {
    id: string;
    recurringNewPayload: RecurringNewPayload;
}

/**
 * 
 */
export class RecurringApi extends runtime.BaseAPI {

    /**
     * Delete one specific recurring by id
     */
    async deleteRecurringRaw(requestParameters: DeleteRecurringRequest): Promise<runtime.ApiResponse<Recurring>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRecurring.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recurring/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFromJSON(jsonValue));
    }

    /**
     * Delete one specific recurring by id
     */
    async deleteRecurring(requestParameters: DeleteRecurringRequest): Promise<Recurring> {
        const response = await this.deleteRecurringRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get one specific recurring by id
     */
    async getRecurringRaw(requestParameters: GetRecurringRequest): Promise<runtime.ApiResponse<Recurring>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRecurring.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recurring/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFromJSON(jsonValue));
    }

    /**
     * Get one specific recurring by id
     */
    async getRecurring(requestParameters: GetRecurringRequest): Promise<Recurring> {
        const response = await this.getRecurringRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get example Recurrings
     */
    async getRecurringExamplesRaw(): Promise<runtime.ApiResponse<Array<RecurringNewPayload>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recurring/examples`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecurringNewPayloadFromJSON));
    }

    /**
     * Get example Recurrings
     */
    async getRecurringExamples(): Promise<Array<RecurringNewPayload>> {
        const response = await this.getRecurringExamplesRaw();
        return await response.value();
    }

    /**
     * Get all of a user\'s recurrings
     */
    async getRecurringsRaw(): Promise<runtime.ApiResponse<Array<Recurring>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recurrings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecurringFromJSON));
    }

    /**
     * Get all of a user\'s recurrings
     */
    async getRecurrings(): Promise<Array<Recurring>> {
        const response = await this.getRecurringsRaw();
        return await response.value();
    }

    /**
     * Creates a new recurring for the user
     */
    async newRecurringRaw(requestParameters: NewRecurringRequest): Promise<runtime.ApiResponse<Recurring>> {
        if (requestParameters.recurringNewPayload === null || requestParameters.recurringNewPayload === undefined) {
            throw new runtime.RequiredError('recurringNewPayload','Required parameter requestParameters.recurringNewPayload was null or undefined when calling newRecurring.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/recurring/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecurringNewPayloadToJSON(requestParameters.recurringNewPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFromJSON(jsonValue));
    }

    /**
     * Creates a new recurring for the user
     */
    async newRecurring(requestParameters: NewRecurringRequest): Promise<Recurring> {
        const response = await this.newRecurringRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update one specific recurring by id
     */
    async updateRecurringRaw(requestParameters: UpdateRecurringRequest): Promise<runtime.ApiResponse<Recurring>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRecurring.');
        }

        if (requestParameters.recurringNewPayload === null || requestParameters.recurringNewPayload === undefined) {
            throw new runtime.RequiredError('recurringNewPayload','Required parameter requestParameters.recurringNewPayload was null or undefined when calling updateRecurring.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/recurring/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecurringNewPayloadToJSON(requestParameters.recurringNewPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFromJSON(jsonValue));
    }

    /**
     * Update one specific recurring by id
     */
    async updateRecurring(requestParameters: UpdateRecurringRequest): Promise<Recurring> {
        const response = await this.updateRecurringRaw(requestParameters);
        return await response.value();
    }

}
