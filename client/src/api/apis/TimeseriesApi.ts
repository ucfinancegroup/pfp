/* tslint:disable */
/* eslint-disable */
/**
 * FinchAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    TimeSeriesResponse,
    TimeSeriesResponseFromJSON,
    TimeSeriesResponseToJSON,
} from '../models';

export interface GetTimeseriesRequest {
    days: number;
}

/**
 * 
 */
export class TimeseriesApi extends runtime.BaseAPI {

    /**
     * Get a user\'s projection timeseries
     */
    async getTimeseriesRaw(requestParameters: GetTimeseriesRequest): Promise<runtime.ApiResponse<TimeSeriesResponse>> {
        if (requestParameters.days === null || requestParameters.days === undefined) {
            throw new runtime.RequiredError('days','Required parameter requestParameters.days was null or undefined when calling getTimeseries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeseries/{days}`.replace(`{${"days"}}`, encodeURIComponent(String(requestParameters.days))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesResponseFromJSON(jsonValue));
    }

    /**
     * Get a user\'s projection timeseries
     */
    async getTimeseries(requestParameters: GetTimeseriesRequest): Promise<TimeSeriesResponse> {
        const response = await this.getTimeseriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get an example timeseries
     */
    async getTimeseriesExampleRaw(): Promise<runtime.ApiResponse<TimeSeriesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeseries/example`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesResponseFromJSON(jsonValue));
    }

    /**
     * Get an example timeseries
     */
    async getTimeseriesExample(): Promise<TimeSeriesResponse> {
        const response = await this.getTimeseriesExampleRaw();
        return await response.value();
    }

    /**
     * Get timeseries with 365 future days generated
     */
    async getTimeseriesYearRaw(): Promise<runtime.ApiResponse<TimeSeriesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeseries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesResponseFromJSON(jsonValue));
    }

    /**
     * Get timeseries with 365 future days generated
     */
    async getTimeseriesYear(): Promise<TimeSeriesResponse> {
        const response = await this.getTimeseriesYearRaw();
        return await response.value();
    }

}
