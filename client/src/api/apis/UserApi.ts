/* tslint:disable */
/* eslint-disable */
/**
 * FinchAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    LoginPayload,
    LoginPayloadFromJSON,
    LoginPayloadToJSON,
    SignupPayload,
    SignupPayloadFromJSON,
    SignupPayloadToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface LoginUserRequest {
    loginPayload: LoginPayload;
}

export interface SignupUserRequest {
    signupPayload: SignupPayload;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Log in a user
     */
    async loginUserRaw(requestParameters: LoginUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.loginPayload === null || requestParameters.loginPayload === undefined) {
            throw new runtime.RequiredError('loginPayload','Required parameter requestParameters.loginPayload was null or undefined when calling loginUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginPayloadToJSON(requestParameters.loginPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Log in a user
     */
    async loginUser(requestParameters: LoginUserRequest): Promise<User> {
        const response = await this.loginUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Log out a user
     */
    async logoutUserRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log out a user
     */
    async logoutUser(): Promise<void> {
        await this.logoutUserRaw();
    }

    /**
     * Sign up a user
     */
    async signupUserRaw(requestParameters: SignupUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.signupPayload === null || requestParameters.signupPayload === undefined) {
            throw new runtime.RequiredError('signupPayload','Required parameter requestParameters.signupPayload was null or undefined when calling signupUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupPayloadToJSON(requestParameters.signupPayload),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Sign up a user
     */
    async signupUser(requestParameters: SignupUserRequest): Promise<User> {
        const response = await this.signupUserRaw(requestParameters);
        return await response.value();
    }

}
