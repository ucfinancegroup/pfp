openapi: 3.0.0
info:
  version: 0.0.1
  title: FinchAPI
servers:
  - url: "https://finchapp.eastus.cloudapp.azure.com/api"
  - url: "https://localhost:8888/api"
  - url: "https://localhost:8080/"
paths:
  /signup:
    post:
      summary: "Sign up a user"
      operationId: signupUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupPayload"
      responses:
        "200":
          description: "User Info"
          headers:
            Set-Cookie:
              description: >
                Contains the session cookies named `sid` and `user_id`.
                Pass this cookie back in subsequent requests.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /login:
    post:
      summary: "Log in a user"
      operationId: loginUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginPayload"
            examples:
              bob:
                value:
                  email: "ligma2@gmail.com"
                  password: "testtest"
      responses:
        "200":
          description: "User Info"
          headers:
            Set-Cookie:
              description: >
                Contains the session cookies named `sid` and `user_id`.
                Pass this cookie back in subsequent requests.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /update/user:
    put:
      summary: "This route receives a payload with requests to change data of a user"
      operationId: updateUser
      tags:
        - users
      security:
        - sidCookie: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: "Status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /registerIOSDevice:
    post:
      summary: "This route will be called once a user logs in on an iOS device and route body will contain the URL of the iOS device, this will be stored in the User model."
      operationId: registerIOSDevice
      tags:
        - users
      security:
        - sidCookie: []

      # requestBody:
      #   required: true
      #   content:
      #     application/json:
      #       schema:
      #         $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        # "200":
        #   description: "Status"
        #   content:
        #     application/json:
        #       schema:
        #         $ref: "#/components/schemas/UpdateUserResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /validate/user:
    post:
      summary: "This route lets our clients perform step-by-step signups."
      operationId: validateUser
      tags:
        - validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateUserPayload"
      responses:
        "200":
          description: "Status"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  #recurring
  /recurring/examples:
    get:
      summary: "Get example Recurrings"
      operationId: getRecurringExamples
      tags:
        - recurring
      security:
        - sidCookie: []
      responses:
        "200":
          description: "List of example recurrngs"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecurringNewPayload"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /recurring/new:
    post:
      summary: "Creates a new recurring for the user"
      operationId: newRecurring
      tags:
        - recurring
      security:
        - sidCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecurringNewPayload"
      responses:
        "200":
          description: "The new recurring"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recurring"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /recurrings:
    get:
      summary: "Get all of a user's recurrings"
      operationId: getRecurrings
      tags:
        - recurring
      security:
        - sidCookie: []
      responses:
        "200":
          description: "Array of recurrings"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recurring"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /recurring/{id}:
    get:
      summary: "Get one specific recurring by id"
      operationId: getRecurring
      tags:
        - recurring
      security:
        - sidCookie: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Recurring to get
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recurring"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    put:
      summary: "Update one specific recurring by id"
      operationId: updateRecurring
      tags:
        - recurring
      security:
        - sidCookie: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Recurring to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecurringNewPayload"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recurring"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    delete:
      summary: "Delete one specific recurring by id"
      operationId: deleteRecurring
      tags:
        - recurring
      security:
        - sidCookie: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Recurring to delete
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recurring"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  # plans
  /plan/new:
    post:
      summary: "Creates a new plan for the user"
      operationId: newPlan
      tags:
        - plan
      security:
        - sidCookie: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanNewPayload"
      responses:
        "200":
          description: "The new plan"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /plans:
    get:
      summary: "Get all of a user's plans"
      operationId: getPlans
      tags:
        - plan
      security:
        - sidCookie: []

      responses:
        "200":
          description: "Array of plans"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plan"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /plan/{id}:
    get:
      summary: "Get one specific plan by id"
      operationId: getPlan
      tags:
        - plan
      security:
        - sidCookie: []

      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Plan to get
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    put:
      summary: "Update one specific plan by id"
      operationId: updatePlan
      tags:
        - plan
      security:
        - sidCookie: []

      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Plan to update
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    delete:
      summary: "Delete one specific plan by id"
      operationId: deletePlan
      tags:
        - plan
      security:
        - sidCookie: []

      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Plan to delete
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  # goals
  /goal/examples:
    get:
      summary: "Get example Goals"
      operationId: getGoalExamples
      tags:
        - goal
      security:
        - sidCookie: []
      responses:
        "200":
          description: "List of example recurrngs"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GoalNewPayload"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /goal/new:
    post:
      summary: "Creates a new goal for the user"
      operationId: newGoal
      tags:
        - goal
      security:
        - sidCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoalNewPayload"
      responses:
        "200":
          description: "The new goal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalAndStatus"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /goals:
    get:
      summary: "Get all of a user's goals"
      operationId: getGoals
      tags:
        - goal
      security:
        - sidCookie: []
      responses:
        "200":
          description: "Array of goals"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GoalAndStatus"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /goal/{id}:
    get:
      summary: "Get one specific goal by id"
      operationId: getGoal
      tags:
        - goal
      security:
        - sidCookie: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Goal to get
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalAndStatus"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    put:
      summary: "Update one specific goal by id"
      operationId: updateGoal
      tags:
        - goal
      security:
        - sidCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoalNewPayload"
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Goal to update
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalAndStatus"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    delete:
      summary: "Delete one specific goal by id"
      operationId: deleteGoal
      tags:
        - goal
      security:
        - sidCookie: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Goal to delete
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalAndStatus"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /leaderboard/{type}:
    get:
      summary: "Get a leaderboard"
      operationId: getLeaderboard
      tags:
        - leaderboard
      security:
        - sidCookie: []

      parameters:
        - in: path
          name: type
          schema:
            type: string
            enum: [savings, spending, income]
          required: true
          description: Which leaderboard to get
      responses:
        "200":
          description: "Leaderboard response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeaderboardResponse"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /insights:
    get:
      summary: "Get all a user's (non-dismissed) insights"
      operationId: getInsights
      tags:
        - insights
      security:
        - sidCookie: []

      responses:
        "200":
          description: "Insights response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Insight"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /insight/{id}/dismiss:
    put:
      summary: "Dismiss an insight"
      operationId: dismissInsight
      tags:
        - insights
      security:
        - sidCookie: []

      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Numeric ID of the Insight to dismiss
      responses:
        "200":
          description: "The insight that was dismissed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Insight"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /timeseries:
    get:
      summary: "Get a user's projection timeseries"
      operationId: getTimeseries
      tags:
        - timeseries
      security:
        - sidCookie: []

      responses:
        "200":
          description: "Timeseries response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TimeSeriesEntry"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /timeseries/example:
    get:
      summary: "Get an example timeseries"
      operationId: getTimeseries
      tags:
        - timeseries
      security:
        - sidCookie: []

      responses:
        "200":
          description: "Timeseries response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TimeSeriesEntry"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /plaid/link_token:
    post:
      summary: "to request link token for PlaidLink"
      operationId: plaidLink
      tags:
        - plaid
      security:
        - sidCookie: []

      responses:
        "200":
          description: "Link Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkTokenCreateResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /plaid/public_token_exchange:
    post:
      summary: "For after a user does PlaidLink thru client"
      operationId: plaidLinkAccess
      tags:
        - plaid
      security:
        - sidCookie: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicTokenExchangeRequest"
      responses:
        "200":
          description: "Status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemIdResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  /plaid/accounts:
    get:
      summary: "Get all of user's connected accounts"
      operationId: getAccounts
      tags:
        - plaid
      security:
        - sidCookie: []
      responses:
        "200":
          description: "Accounts response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsResponse"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /plaid/accounts/{id}:
    delete:
      summary: "Delete account with given item_id"
      operationId: deleteAccount
      tags:
        - plaid
      security:
        - sidCookie: []

      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Item ID of the account to delete
      responses:
        "200":
          description: "The account was deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemIdResponse"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /snapshots:
    get:
      summary: "Get all a user's snapshots"
      operationId: getSnapshots
      tags:
        - snapshots
      security:
        - sidCookie: []
      responses:
        "200":
          description: "Snapshots response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"
        default:
          description: "Server error or validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  # Begin remove for iOS (Swift)
  /plaid/webhook:
    post:
      summary: "Where Plaid sends updates about items, transactions, etc https://plaid.com/docs/api/webhooks/"
      operationId: plaidWebhook
      tags:
        - plaid
      parameters:
        - in: header
          name: Plaid-Verification
          schema:
            $ref: "#/components/schemas/PlaidJWT"
      responses:
        "200":
          description: "Status"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  # End remove for iOS
components:
  securitySchemes:
    sidCookie:
      type: apiKey
      in: cookie
      name: finch-sid
  schemas:
    SignupPayload:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
        - income
        - location
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        income:
          type: number
        location:
          $ref: "#/components/schemas/Location"
    LoginPayload:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    User:
      type: object
      required:
        - email
        # password hash never returned.
        - first_name
        - last_name
        - location
        - income
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        location:
          $ref: "#/components/schemas/Location"
        income:
          type: number
        # recurrings: # not returned
        # snapshots: # not returned
        # accounts: # maybe
        # goals: #
        # plans: #
        # insights: #
        device_url:
          type: string
          format: url

    Location:
      type: object
      required:
        - lat
        - lon
        - has_location
      properties:
        has_location:
          type: boolean
        lat:
          type: number
          format: float64
        lon:
          type: number
          format: float64
    AccountsResponse:
      type: object
      required:
        - accounts
        - errors
      properties:
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/Account"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/AccountError"

    AccountError:
      type: object
      required:
        - item_id
        - code
        - message
      properties:
        item_id:
          type: string
        code:
          type: number
        message:
          type: string

    Account:
      type: object
      required:
        - item_id
        - name
        - balance
      properties:
        item_id:
          type: string
        name:
          type: string
        balance:
          type: number
          format: float64

    UpdateUserRequest:
      type: object
      properties:
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        income:
          type: number

    # with serde we wanna #[serde(tag = "t", content = "content")]
    # enum Block {
    #     Para(Vec<Inline>),
    #     Str(String),
    # }
    ValidateUserPayload:
      type: object
      required:
        - typ
        - content
      properties:
        typ:
          type: string
          enum: [email, password]
        content:
          type: string

    TimeInterval:
      type: object
      required:
        - typ
        - content
      properties:
        typ:
          type: string
          enum: [monthly, annually, daily, weekly]
        content:
          type: integer

    TimePeriod:
      type: object
      required:
        - start
        - end
      properties:
        start:
          type: integer
        end:
          type: integer

    # same as Recurring but no _id
    RecurringNewPayload:
      type: object
      required:
        - name
        - start
        - end
        - principal
        - amount
        - interest
        - frequency
      properties:
        name:
          type: string
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        principal:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        interest:
          type: number
        frequency:
          $ref: "#/components/schemas/TimeInterval"
      example:
        name: "Unemployment Benefits"
        start: 1609977600
        end: 1617753600
        principal: 0
        interest: 0.0
        amount: 300
        frequency:
          typ: monthly
          content: 1 # *once* per month.

    # can be either *principal and interest rate* OR a recurring income/expense *amount*
    # for debt, principal can be negative
    Recurring:
      type: object
      required:
        - _id
        - name
        - start
        - end
        - principal
        - amount
        - interest
        - frequency
      properties:
        _id:
          $ref: "#/components/schemas/MongoObjectID"
        name:
          type: string
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        principal:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        interest:
          type: number
        frequency:
          $ref: "#/components/schemas/TimeInterval"

    Asset:
      type: object
      required:
        - name
        - class
        - performance
      properties:
        name:
          type: string
        class:
          type: string
        performance:
          description: "Annualised Percentage Performance"
          type: number

    AssetChange:
      type: object
      required:
        - asset
        - change
      properties:
        asset:
          $ref: "#/components/schemas/Asset"
        change:
          type: number
          format: float64
          minimum: -100.0

    Allocation:
      type: object
      required:
        - description
        - date
        - schema
      properties:
        description:
          type: string
        date:
          type: integer
        schema:
          $ref: "#/components/schemas/AllocationChange"

    AllocationChange:
      type: object
      required:
        - asset
        - change
      properties:
        asset:
          $ref: "#/components/schemas/Asset"
        change:
          type: number
          format: float64
          minimum: 0.0
          maximum: 100.0

    KnownFinancialProduct:
      type: object
      required:
        - name
        - typ
        - logo
        - product_url
      properties:
        name:
          type: string
        typ:
          type: string
        logo:
          type: string
          format: url
        product_url:
          type: string
          format: url

    Transform:
      type: object
      required:
        - trigger
        - change
      properties:
        trigger:
          $ref: "#/components/schemas/TimeInterval"
        change:
          $ref: "#/components/schemas/AssetChange"

    Event:
      type: object
      required:
        - name
        - start
        - transforms
      properties:
        name:
          type: string
        start:
          type: integer
          # format: int64
        transforms:
          type: array
          items:
            $ref: "#/components/schemas/Transform"

    PlanNewPayload:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        recurrings:
          type: array
          items:
            $ref: "#/components/schemas/Recurring"
        allocations:
          type: array
          items:
            $ref: "#/components/schemas/Transform"
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
    Plan:
      type: object
      required:
        - _id
        - name
      properties:
        _id:
          $ref: "#/components/schemas/MongoObjectID"
        name:
          type: string
        recurrings:
          type: array
          items:
            $ref: "#/components/schemas/Recurring"
        allocations:
          type: array
          items:
            $ref: "#/components/schemas/Allocation"
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"

    GoalNewPayload:
      type: object
      required:
        - name
        - start
        - end
        - threshold
        - metric
      properties:
        name:
          type: string
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        threshold:
          type: number
        metric:
          $ref: "#/components/schemas/GoalMetric"

    Goal:
      type: object
      required:
        - _id
        - name
        - start
        - end
        - threshold
        - metric
      properties:
        _id:
          $ref: "#/components/schemas/MongoObjectID"
        name:
          type: string
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        threshold:
          type: number
        metric:
          $ref: "#/components/schemas/GoalMetric"

    GoalMetric:
      type: string
      enum: [Savings, Spending, Income]

    GoalAndStatus:
      type: object
      required:
        - goal
        - progress
      properties:
        goal:
          $ref: "#/components/schemas/Goal"
        progress:
          type: number
          format: float64

    LeaderboardResponse:
      type: object
      required:
        - leaderboard_type
        - percentile
      properties:
        leaderboard_type:
          type: string
        description:
          type: string
        percentile:
          type: number
          minimum: 0
          maximum: 100
          exclusiveMaximum: true

    Insight:
      type: object
      required:
        - _id
        - title
        - description
        - insight_type
        - dismissed
        - generation_time
      properties:
        title:
          type: string
        description:
          type: string
        insight_type:
          type: string
          enum:
            [ProductRecommendation, Savings, Spending, Income, Goal, Incomplete]
        dismissed:
          type: boolean
        generation_time:
          type: integer
          format: int64
        imageURL:
          type: string
          nullable: true

    TimeSeriesEntry:
      description: "Daily values of user's net"
      type: object
      required:
        - date
        - net_worth
      properties:
        date:
          type: integer
        net_worth:
          type: number
          format: float64

    LinkTokenCreateResponse:
      type: object
      required:
        - link_token
        - expiration
      properties:
        link_token:
          type: string
        expiration:
          type: string
        request_id:
          type: string
    ItemIdResponse:
      type: object
      required:
        - item_id
      properties:
        item_id:
          type: string
          description: "Item ID for newly added account"
    PublicTokenExchangeRequest:
      type: object
      required:
        - public_token
      properties:
        public_token:
          type: string
        client_id:
          type: string
        secret:
          type: string
    MongoObjectID:
      type: object
      required:
        - "$oid"
      properties:
        "$oid":
          type: string
          example: "5ff7361e0027e8ac003af400"
    # stores money as the raw amount times 100: $$.cc -> $$cc.00, but integer
    Money:
      type: object
      required:
        - amount
      properties:
        amount:
          type: integer
          format: int64
    Snapshot:
      type: object
      required:
        - net_worth
        - running_savings
        - running_spending
        - running_income
        - snapshot_time
      properties:
        net_worth:
          $ref: "#/components/schemas/Money"
        running_savings:
          $ref: "#/components/schemas/Money"
        running_spending:
          $ref: "#/components/schemas/Money"
        running_income:
          $ref: "#/components/schemas/Money"
        snapshot_time:
          type: integer
          format: int64
    PlaidJWT:
      type: object
      required:
        - alg
        - kid
        - typ
      properties:
        alg:
          type: string
        kid:
          type: string
        typ:
          type: string
    ApiError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
